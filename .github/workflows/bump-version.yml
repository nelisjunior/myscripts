name: Bump Version

"on":
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  bump-version:
    runs-on: ubuntu-latest
    if: >-
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[version bump]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Get latest released version
        id: released_version
        run: |
          # Tenta buscar a última release publicada
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          if [[ "$LATEST_RELEASE" == "null" || -z "$LATEST_RELEASE" ]]; then
            # Se não houver release, busca a última tag
            LATEST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          fi
          if [[ -z "$LATEST_RELEASE" ]]; then
            # Se não houver tag, busca a versão do arquivo VERSION
            if [ -f VERSION ]; then
              LATEST_RELEASE=$(cat VERSION)
            else
              LATEST_RELEASE="beta-v0.1.0"
            fi
          fi
          echo "version=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "Latest released version: $LATEST_RELEASE"

      - name: Determine version bump
        id: version_bump
        run: |
          # Get commit messages since last tag (or all commits if no tags)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --no-merges)
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # Default to patch
          BUMP_TYPE="patch"

          # Check for breaking changes
          if echo "$COMMITS" | grep -E "BREAKING CHANGE|!:" >/dev/null; then
            BUMP_TYPE="major"
            echo "Found BREAKING CHANGE - bumping major version"
          # Check for features
          elif echo "$COMMITS" | grep -E "^feat(\(.*\))?:" >/dev/null; then
            BUMP_TYPE="minor"
            echo "Found feat commits - bumping minor version"
          # Check for fixes
          elif echo "$COMMITS" | grep -E "^fix(\(.*\))?:" >/dev/null; then
            BUMP_TYPE="patch"
            echo "Found fix commits - bumping patch version"
          else
            echo "No conventional commits found - bumping patch version"
          fi

          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.released_version.outputs.version }}"
          BUMP_TYPE="${{ steps.version_bump.outputs.bump_type }}"

          VERSION_PART=$(echo "$CURRENT" | sed 's/beta-v//')
          MAJOR=$(echo "$VERSION_PART" | cut -d. -f1)
          MINOR=$(echo "$VERSION_PART" | cut -d. -f2)
          PATCH=$(echo "$VERSION_PART" | cut -d. -f3)

          echo "Current version parts: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"

          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="beta-v${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update VERSION file
        run: |
          echo "${{ steps.new_version.outputs.version }}" > VERSION
          echo "Updated VERSION file to: $(cat VERSION)"

      - name: Update UserScript versions
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          echo "Updating .user.js files with version: $NEW_VERSION"

          # Find all .user.js files recursively
          find . -name "*.user.js" -type f | while read -r file; do
            echo "Processing: $file"

            # Update @version line in UserScript header
            if grep -q "// @version" "$file"; then
              # Replace the version line
              sed -i "s|// @version.*|// @version      $NEW_VERSION|g" "$file"
              echo "  ✅ Updated @version in $file"
            else
              echo "  ⚠️  No @version found in $file"
            fi
          done

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git diff --name-only
          fi

      - name: Commit and tag version
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"

          # Add all changed files
          git add VERSION
          git add "*.user.js"

          # Find and add all .user.js files that might be in subdirectories
          find . -name "*.user.js" -type f -exec git add {} \;

          # Commit with version bump message
          git commit -m "chore: bump version to $NEW_VERSION [version bump] [skip ci]"

          # Create annotated tag
          git tag -a "$NEW_VERSION" -m "Release $NEW_VERSION"

          # Push changes and tags
          git push origin main
          git push origin "$NEW_VERSION"

          echo "✅ Version bumped to $NEW_VERSION and tagged"

      - name: Create GitHub Release
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.version }}
          release_name: Release ${{ steps.new_version.outputs.version }}
          body: |
            Automated release for version ${{ steps.new_version.outputs.version }}

            Changes in this release:
            - Version bumped from ${{ steps.released_version.outputs.version }} to ${{ steps.new_version.outputs.version }}
            - Updated all UserScript @version fields
          draft: false
          prerelease: true
